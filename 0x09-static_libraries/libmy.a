
int _putchar(char c)
{
	return (write(1, &c, 1));
}

int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}

}

int _isalpha(int c)
{
	if (c >= 65 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}

}

int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	else
	{
		return (-n);
	}

}

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}

	_putchar('\n');
}

char *_strcpy(char *dest, char *src)
{
	*dest = *src;

	return (dest);
}

int _atoi(char *s)
{
	unsigned int i = 0, z = 0, p = 0;
	unsigned int h = 1, w = 1, n;

	while (s[i])
	{
		if (z > 0 && (s[i] < '0' || s[i] > '9'))
		{
			break;
		}

		if (s[i] == '-')
		{
			h *= -1;
		}

		if ((s[i] >= '0') && (s[i] <= '9'))
		{
			if (z > 0)
			{
				w *= 10;
			}
			z++;
		}
		i++;
	}

	for (n = i - z; n < i; n++)
	{
		p = p + ((s[n] - 48) * w);
		w /= 10;
	}

	return (p * h);
}

char *_strcat(char *dest, char *src)
{
	int i = 0, j = 0, m;

	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != '\0')
	{
		j++;
	}

	for (m = 0; m < j; m++)
	{
		dest[i] = src[m];
		i++;
	}

	return (dest);
}

char *_strncat(char *dest, char *src, int n)
{
	int i = 0, m;

	while (dest[i] != '\0')
	{
		i++;
	}

	for (m = 0; m < n; m++)
	{
		dest[i] = src[m];
		i++;
	}

	return (dest);
}


char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];

	}

	return (dest);
}

int _strcmp(char *s1, char *s2)
{
	int i, result;

	for (i = 0; s1[i] == s2[i] && s1[i] == '\0'; i++)
    {

    }

	if (s1[i] < s2[i])
	{
		result = -15;
	}
	else if (s1[i] > s2[i])
	{
		result = 15;
	}
	else
	{
		result = 0;
	}

	return (result);
}

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}

char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != '\0')
	{
		if (s[i] == c)
		{
			return (&s[i]);
		}
	}

	return (NULL);
}

unsigned int _strspn(char *s, char *accept)
{
	int len_s = 0, len_accept = 0;
	int i, j;

	while (s[len_s] != '\0')
		len_s++;

	while (accept[len_accept] != '\0')
		len_accept++;

	for (i = 0; i < len_s; i++)
	{
		for (j = 0; j < len_accept; j++)
		{
			if (s[i] != accept[j])
			{

			}
			else
			{
				break;
			}

		}

		if (j > (len_accept - 2) && s[i] != accept[j])
			return (i);
	}

	return (i);
}

char *_strpbrk(char *s, char *accept)
{
	int len_s = 0, len_accept = 0;
	int i, j;
	char *p;
	p = NULL;

	while (s[len_s] != '\0')
		len_s++;

	while (accept[len_accept] != '\0')
		len_accept++;

	for (i = 0; i < len_s; i++)
	{
		for (j = 0; j < len_accept; j++)
		{
			if (s[i] == accept[j])
			{
				p = &s[i];
				break;
			}
		}
		if (s[i] == accept[j])
			break;
	}

	return (p);
}

char *_strstr(char *haystack, char *needle)
{
	int len_needle = 0, i = 0, j = 0, k = 0, stop = 0;
	char *p;

	p = NULL;

	while (needle[len_needle] != '\0')
	{
		len_needle++;
	}

	while (haystack[i] != '\0' && !stop)
	{
		for (j = 0; j < len_needle; j++)
		{
			if (haystack[i] == needle[j] && !stop)
			{
				for (k = 0; k < len_needle; k++)
				{
					if (haystack[i] == needle[j])
					{
						i++;
						j++;
					}
				}
				if (k > (len_needle - 2)  && i > (len_needle - 2) &&
				(haystack[i] == needle[j]))
				{
					p = &haystack[i - len_needle];
					stop = 1;
					break;
				}
			}
		}
		if (k > (len_needle - 2)  && i > (len_needle - 2)
		&& (haystack[i] == needle[j]))
			break;
		i++;
	}
	return (p);
}
